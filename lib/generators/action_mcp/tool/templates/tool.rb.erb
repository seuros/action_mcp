# frozen_string_literal: true

class <%= class_name %> < ApplicationMCPTool
  tool_name "<%= tool_name %>"
  description "<%= description %>"

    <% annotations.each do |k, v| %>
    <%= k == :read_only ? "read_only(#{v})" : k == :destructive ? "destructive(#{v})" : "annotate(:#{k}, #{v.inspect})" %>
    <% end %>

    <% if properties.empty? %>
  property :input, type: "string", description: "Input", required: true
    <% else %>
    <% properties.each do |prop| %>
  property :<%= prop[:name] %>, type: "<%= prop[:type] %>", description: "<%= prop[:description] %>"<%= ", required: true" if prop[:required] %>
    <% end %>
    <% end %>

  def perform
    render(text: "Processing <%= properties.map { |p| p[:name] }.join(', ') %>")

    # Optional outputs:
    # render(audio: "<base64_data>", mime_type: "audio/mpeg")
    # render(image: "<base64_data>", mime_type: "image/png")
    # render(resource: "file://path", mime_type: "application/json", text: "{}")
    # render(resource: "file://path", mime_type: "application/octet-stream", blob: "<base64_data>")
  rescue => e
    render(error: ["Error: #{e.message}"])
  end
end
